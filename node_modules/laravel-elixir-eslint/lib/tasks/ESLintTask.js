'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/* eslint-disable class-methods-use-this, global-require */

var eslint = void 0;

var ESLintTask = function (_Elixir$Task) {
  _inherits(ESLintTask, _Elixir$Task);

  /**
   * Create a new ESLintTask instance.
   *
   * @param {string}      name    Task name
   * @param {GulpPaths}   paths   Gulp src and output paths
   * @param {object|null} options ESLint options
   */
  function ESLintTask(name, paths, options) {
    _classCallCheck(this, ESLintTask);

    var _this = _possibleConstructorReturn(this, (ESLintTask.__proto__ || Object.getPrototypeOf(ESLintTask)).call(this, name, null, paths));

    _this.output = '\u200B';
    _this.options = options;
    return _this;
  }

  /**
   * Lazy load the task dependencies.
   *
   * @returns {void}
   */


  _createClass(ESLintTask, [{
    key: 'loadDependencies',
    value: function loadDependencies() {
      eslint = require('gulp-eslint');
    }

    /**
     * Build up the Gulp task.
     *
     * @returns {void}
     */

  }, {
    key: 'gulpTask',
    value: function gulpTask() {
      return gulp.src(this.src.path).pipe(this.lint()).pipe(eslint.format()).pipe(eslint.failAfterError()).on('error', this.onError());
    }

    /**
     * Register file watchers.
     *
     * @returns {void}
     */

  }, {
    key: 'registerWatchers',
    value: function registerWatchers() {
      this.watch(this.src.path);
    }

    /**
     * Lint task
     *
     * @returns {Stream} Object stream usable in Gulp pipes.
     */

  }, {
    key: 'lint',
    value: function lint() {
      this.recordStep('Executing ' + this.ucName());
      return eslint(this.options);
    }
  }]);

  return ESLintTask;
}(Elixir.Task);

exports.default = ESLintTask;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90YXNrcy9FU0xpbnRUYXNrLmpzIl0sIm5hbWVzIjpbImVzbGludCIsIkVTTGludFRhc2siLCJuYW1lIiwicGF0aHMiLCJvcHRpb25zIiwib3V0cHV0IiwicmVxdWlyZSIsImd1bHAiLCJzcmMiLCJwYXRoIiwicGlwZSIsImxpbnQiLCJmb3JtYXQiLCJmYWlsQWZ0ZXJFcnJvciIsIm9uIiwib25FcnJvciIsIndhdGNoIiwicmVjb3JkU3RlcCIsInVjTmFtZSIsIkVsaXhpciIsIlRhc2siXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQUE7O0FBRUEsSUFBSUEsZUFBSjs7SUFFcUJDLFU7OztBQUNuQjs7Ozs7OztBQU9BLHNCQUFZQyxJQUFaLEVBQWtCQyxLQUFsQixFQUF5QkMsT0FBekIsRUFBa0M7QUFBQTs7QUFBQSx3SEFDMUJGLElBRDBCLEVBQ3BCLElBRG9CLEVBQ2RDLEtBRGM7O0FBR2hDLFVBQUtFLE1BQUwsR0FBZSxRQUFmO0FBQ0EsVUFBS0QsT0FBTCxHQUFlQSxPQUFmO0FBSmdDO0FBS2pDOztBQUVEOzs7Ozs7Ozs7dUNBS21CO0FBQ2pCSixlQUFTTSxRQUFRLGFBQVIsQ0FBVDtBQUNEOztBQUVEOzs7Ozs7OzsrQkFLVztBQUNULGFBQU9DLEtBQUtDLEdBQUwsQ0FBUyxLQUFLQSxHQUFMLENBQVNDLElBQWxCLEVBQ0pDLElBREksQ0FDQyxLQUFLQyxJQUFMLEVBREQsRUFFSkQsSUFGSSxDQUVDVixPQUFPWSxNQUFQLEVBRkQsRUFHSkYsSUFISSxDQUdDVixPQUFPYSxjQUFQLEVBSEQsRUFJSkMsRUFKSSxDQUlELE9BSkMsRUFJUSxLQUFLQyxPQUFMLEVBSlIsQ0FBUDtBQUtEOztBQUVEOzs7Ozs7Ozt1Q0FLbUI7QUFDakIsV0FBS0MsS0FBTCxDQUFXLEtBQUtSLEdBQUwsQ0FBU0MsSUFBcEI7QUFDRDs7QUFFRDs7Ozs7Ozs7MkJBS087QUFDTCxXQUFLUSxVQUFMLGdCQUE2QixLQUFLQyxNQUFMLEVBQTdCO0FBQ0EsYUFBT2xCLE9BQU8sS0FBS0ksT0FBWixDQUFQO0FBQ0Q7Ozs7RUF0RHFDZSxPQUFPQyxJOztrQkFBMUJuQixVIiwiZmlsZSI6IkVTTGludFRhc2suanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBjbGFzcy1tZXRob2RzLXVzZS10aGlzLCBnbG9iYWwtcmVxdWlyZSAqL1xuXG5sZXQgZXNsaW50O1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBFU0xpbnRUYXNrIGV4dGVuZHMgRWxpeGlyLlRhc2sge1xuICAvKipcbiAgICogQ3JlYXRlIGEgbmV3IEVTTGludFRhc2sgaW5zdGFuY2UuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSAgICAgIG5hbWUgICAgVGFzayBuYW1lXG4gICAqIEBwYXJhbSB7R3VscFBhdGhzfSAgIHBhdGhzICAgR3VscCBzcmMgYW5kIG91dHB1dCBwYXRoc1xuICAgKiBAcGFyYW0ge29iamVjdHxudWxsfSBvcHRpb25zIEVTTGludCBvcHRpb25zXG4gICAqL1xuICBjb25zdHJ1Y3RvcihuYW1lLCBwYXRocywgb3B0aW9ucykge1xuICAgIHN1cGVyKG5hbWUsIG51bGwsIHBhdGhzKTtcblxuICAgIHRoaXMub3V0cHV0ICA9ICdcXHUyMDBCJztcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICB9XG5cbiAgLyoqXG4gICAqIExhenkgbG9hZCB0aGUgdGFzayBkZXBlbmRlbmNpZXMuXG4gICAqXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cbiAgbG9hZERlcGVuZGVuY2llcygpIHtcbiAgICBlc2xpbnQgPSByZXF1aXJlKCdndWxwLWVzbGludCcpO1xuICB9XG5cbiAgLyoqXG4gICAqIEJ1aWxkIHVwIHRoZSBHdWxwIHRhc2suXG4gICAqXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cbiAgZ3VscFRhc2soKSB7XG4gICAgcmV0dXJuIGd1bHAuc3JjKHRoaXMuc3JjLnBhdGgpXG4gICAgICAucGlwZSh0aGlzLmxpbnQoKSlcbiAgICAgIC5waXBlKGVzbGludC5mb3JtYXQoKSlcbiAgICAgIC5waXBlKGVzbGludC5mYWlsQWZ0ZXJFcnJvcigpKVxuICAgICAgLm9uKCdlcnJvcicsIHRoaXMub25FcnJvcigpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWdpc3RlciBmaWxlIHdhdGNoZXJzLlxuICAgKlxuICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICovXG4gIHJlZ2lzdGVyV2F0Y2hlcnMoKSB7XG4gICAgdGhpcy53YXRjaCh0aGlzLnNyYy5wYXRoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBMaW50IHRhc2tcbiAgICpcbiAgICogQHJldHVybnMge1N0cmVhbX0gT2JqZWN0IHN0cmVhbSB1c2FibGUgaW4gR3VscCBwaXBlcy5cbiAgICovXG4gIGxpbnQoKSB7XG4gICAgdGhpcy5yZWNvcmRTdGVwKGBFeGVjdXRpbmcgJHt0aGlzLnVjTmFtZSgpfWApO1xuICAgIHJldHVybiBlc2xpbnQodGhpcy5vcHRpb25zKTtcbiAgfVxufVxuIl19